class MemberUtils {
    static higherMember(member1, member2) {
        if (member1.guild.id !== member2.guild.id) throw new Error("Members not in the same guild");
        
        if (member1.guild.ownerID === member1.id) return member1;
        if (member2.guild.ownerID === member2.id) return member2;
        
        let firstRole = null;
        if (member1.roles.length > 0) {
            let roleList = member1.guild.roles.filter(role => {
                return member1.roles.includes(role.id);
            });
            
            firstRole = roleList.reduce((currentHighest, role) => {
                if (currentHighest === null) return role;
                return currentHighest.position > role.position ? currentHighest : role;
            }, null);
        }
        
        let secondRole = null;
        if (member2.roles.length > 0) {
            let roleList = member1.guild.roles.filter(role => {
                return member2.roles.includes(role.id);
            });
            
            secondRole = roleList.reduce((currentHighest, role) => {
                if (currentHighest === null) return role;
                return currentHighest.position > role.position ? currentHighest : role;
            }, null);
        }
        
        if (!firstRole && !secondRole) {
            return null; //Equal position: @everyone
        } else if (!firstRole && secondRole) {
            return member2;
        } else if (firstRole && !secondRole) {
            return member1;
        } else if (firstRole.position < secondRole.position) {
            return member2;
        } else if (firstRole.position > secondRole.position) {
            return member1;
        } else {
            return null; //Equal position
        }
    }
    
    static tag(member) {
        if (member.bot) {
            return `${member.username}#${member.discriminator} \`[BOT]\``;
        } else {
            return `${member.username}#${member.discriminator}`;
        }
    }
}

module.exports = MemberUtils;