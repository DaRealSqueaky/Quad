class Lexer {
    #string;
    #position;
    
    constructor(string) {
        this.#string = string;
        this.#position = 0;
    }
    
    lex() {
        let token = {
            type: "string",
            value: ""
        };
        let state = 0;
        
        while (!this.atEnd) {
            let char = this.#string[this.#position];
            this.#position++;
            
            switch (state) {
                case 0: { //Character #0
                    if (char === " ") {
                    } else if (char === "\"") {
                        state = 2;
                    } else if (char === "-") {
                        token.value += char;
                        state = 4;
                    } else {
                        token.value += char;
                        state = 1;
                    }
                    break;
                }
                case 1: { //Unquoted string literal
                    if (char === " ") {
                        return token;
                    } else {
                        token.value += char;
                    }
                    break;
                }
                case 2: { //Quoted string literal
                    if (char === "\"") {
                        state = 3;
                    } else if (char === "\\") {
                        state = 7;
                    } else {
                        token.value += char;
                    }
                    break;
                }
                case 3: { //After quoted string literal
                    if (char === " ") {
                        return token;
                    } else {
                        throw new Error("Syntax error");
                    }
                }
                case 4: { //Possible flag
                    if (char === " ") {
                        return token;
                    } else if (char === "-") {
                        token.type = "flag"
                        token.value = "";
                        token.name = "";
                        state = 5;
                    } else {
                        token.value += char;
                        state = 1;
                    }
                    break;
                }
                case 5: { //Flag name
                    if (char === " ") {
                        return token;
                    } else if (char === "=") {
                        state = 6;
                    } else {
                        token.name += char;
                    }
                    break;
                }
                case 6: { //First character of value in flag
                    if (char === "\"") {
                        state = 2;
                    } else {
                        token.value += char;
                        state = 1;
                    }
                    break;
                }
                case 7: { //Escaped character in string literal
                    if (char === "\"") {
                        console.log("just quote");
                        token.value += "\"";
                    } else if (char === "\\") {
                        console.log("just slash");
                        token.value += "\\";
                    } else {
                        console.log("screw you");
                        token.value += "\\" + char;
                    }
                    state = 2;
                }
            }
        }
        
        if ([1, 3, 4, 5, 6].includes(state)) {
            return token;
        } else {
            throw new Error("Syntax error");
        }
    }
    
    get atEnd() {
        return this.#string.length == this.#position;
    }
}

module.exports = Lexer;