const config = require("config");

class HandlerCommand {
    #name;
    #func;
    #args;
    #flags;
    #opts;
    
    constructor(name, args, func) {
        this.#name = name;
        this.#func = func;
        this.#args = [];
        this.#flags = [];
        this.#opts = args.opts;
        
        //Parse the args
        if (Array.isArray(args.args)) {
            this.#args = args.args;
        }
        
        //Parse the flags
        if (Array.isArray(args.flags)) {
            this.#flags = args.flags;
        }
    }
    
    get name() {
        return this.#name;
    }
    
    get func() {
        return this.#func;
    }
    
    get args() {
        return this.#args;
    }
    
    get flags() {
        return this.#flags;
    }
    
    get opts() {
        return this.#opts;
    }
    
    helpEmbed(t, prefix) {
        let fields = [];
        
        fields.push({
            name: t("Usage"),
            value: `${prefix}${this.#name} ${this.#args.map(arg => {
                return `\`${arg.name}\``
            })} ${this.#flags.map(flag => {
                return `\`[--${flag.name}]\``
            })}`
        })
        
        if (this.#opts.help) {
            if (this.#opts.help.description) {
                fields.push({
                    name: t("Description"),
                    value: t(this.#opts.help.description, {botname: config.get("bot.name")})
                });
            }
        }
        
        if (this.#args.length > 0) {
            let argsField = {
                name: t("Arguments (in order)")
            };
            
            let argText = [];
            for (let arg of this.#args) {
                argText.push(`\`${arg.name}\` ${arg.description ? arg.description : ""}`);
            }
            argsField.value = argText.join("\n");
            fields.push(argsField);
        }
        
        let embed = {
            title: t("{{botname}} Help", {botname: config.get("bot.name")}),
            description: t("for {{command}}", {command: this.#name}),
            fields: fields
        };
        
        return embed;
    }
}

module.exports = HandlerCommand;