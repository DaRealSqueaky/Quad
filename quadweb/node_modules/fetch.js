class Fetch {
    /**
     * Define and create custom headers for Fetch requests
     */
    static headers() {
        let headers = {
            "Content-Type": "application/json"
        };
        // look for token in local storage, create new token if null
        let token = localStorage.getItem("token");
        if (token != null) {
            headers["Authorization"] = "Token " + token;
        }
        
        return headers;
    }
    
    /**
     * Uses fetch to make a request to the in-house API
     * @param {string} method Type of request to make
     * @param {string} url endpoint for the API call
     * @param {boolean} showLoader if true displays a loading animation
     */
    static async performRequest(method, url) {
        let err = null;
        // Display loading animation for the user
        let result = await fetch("/api" + url, {
            method: method,
            headers: Fetch.headers()
        }).catch((error) => {
            err = error;
        });
        
        if (err) throw err;
        if (result.status == 204) return {};
        if (result.status < 200 || result.status > 299) throw result;
        return await result.json();
    }
    /**
     * Use fetch's post request 
     * @param {string} url endpoint for fetch request
     * @param {Object} data payload of information
     * @param {boolean} showLoader if true displays a loading animation
     */
    static async post(url, data) {
        let err = null;
        let result = await fetch("/api" + url, {
            method: "POST",
            headers: Fetch.headers(),
            body: JSON.stringify(data)
        }).catch((error) => {
            err = error;
        });
        
        if (err) throw err;
        if (result.status == 204) return {};
        if (result.status < 200 || result.status > 299) throw result;
        return await result.json();
    }
    /**
     * Use fetch's patch request 
     * @param {string} url API endpoint to access
     * @param {Object} data Payload to patch with
     * @param {boolean} showLoader if true displays a loading animation 
     */
    static async patch(url, data) {
        let err = null;
        let result = await fetch("/api" + url, {
            method: "PATCH",
            headers: Fetch.headers(),
            body: JSON.stringify(data)
        }).catch((error) => {
            err = error;
        });
        
        if (err) throw err;
        if (result.status == 204) return {};
        if (result.status < 200 || result.status > 299) throw result;
        return await result.json();
    }
    /**
     * GET request to specific url, used to access in-house API
     * @param {string} url url to perform API request
     * @param {boolean} showLoader boolean value to display loading animation
     */
    static get(url) {
        return Fetch.performRequest("GET", url);
    }
    /**
     * DELETE request to specified url
     * @param {string} url url to perform API request
     * @param {boolean} showLoader boolean value to display loading animation
     */
    static delete(url) {
        return Fetch.performRequest("DELETE", url);
    }
}

export default Fetch;
